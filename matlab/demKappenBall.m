global PAUSEDEMO
global SHOWARROWS
global INSTANTVELOCITIES

INSTANTVELOCITIES = true;
PAUSEDEMO = true;
SHOWARROWS = false;

global ball
global visStruct

screenRatio = 5/6;
close all;
fh = figure('name', 'Kappenball', 'NumberTitle', 'off');
set(fh, 'menubar', 'none')
ssize = get(0, 'screensize');
units = get(0, 'units');
ssize = [1 1 1024 768];

funits = get(gcf, 'units');
set(gcf, 'units', units)
set(gcf, 'position', ssize)
set(gcf, 'units', funits)
midPoint = 0.5*[ssize(3) ssize(4)];
ssize(4) = ssize(4)*screenRatio;
ssize(3) = ssize(3)*screenRatio;
ssize(1:2) = midPoint - 0.5*[ssize(3) ssize(4)];
set(gcf, 'position', ssize);


pauseButton = uicontrol('units', 'normalized', ...
                        'position', [0.2 0.1 0.05 0.05], ...                   
                        'string', 'Pause', ...
                        'style', 'togglebutton', ...
                        'callback', 'toggleDemo', ...
                        'value', PAUSEDEMO);

visStruct.resetButton = uicontrol('units', 'normalized', ...
                                  'position', [0.475 0.1 0.05 0.05], ...
                                  'string', 'Reset', ...
                                  'style', 'pushbutton', ...
                                  'callback', 'resetButton');

visStruct.stopButton = uicontrol('units', 'normalized', ...
                                 'position', [0.75 0.1 0.05 0.05], ...
                                 'string', 'Exit', ...
                                 'style', 'pushbutton', ...
                                 'callback', 'toggleRun');

visStruct.varSlider = uicontrol('units', 'normalized', ...
                                'position', [0.1 0.02 0.8 0.03], ...
                                'string', 'Variance', ...
                                'style', 'slider', ...
                                'callback', 'changeVar', ...
                                'min', 0, 'max', ...
                                3);

boxWidth = 5;
screenColour = [.4 .5 .8];
ball.x = [0 10];
xlim = [-12 12];
visStruct.holeWidth = 4;
visStruct.holeCenter = 6;
cent = visStruct.holeCenter;
w = visStruct.holeWidth;
pinHeight = 0.5;
pinInterval = 0.2;
ylim = [-2 10];

visStruct.screenAx = axes('position', [0.1 0.2 0.8 0.7]);
set(visStruct.screenAx, 'color', screenColour, ...
         'xcolor', screenColour, ...
         'ycolor', screenColour, ...
         'xtick', [], ...
         'ytick', []);
ball.handle = plot(ball.x(1), ball.x(2), 'r.', 'markersize', 60);
axis off 
axis equal
set(visStruct.screenAx, 'xlim', xlim);
set(visStruct.screenAx, 'ylim', ylim);
line([xlim(1) xlim(1) -cent-w/2 -cent-w/2], ...
     [ylim(2) -pinHeight -pinHeight ylim(1)], ...
     'linewidth', boxWidth);
line([-cent+w/2 -cent+w/2 cent-w/2 cent-w/2], ...
     [ylim(1) -pinHeight -pinHeight ylim(1)], ...
     'linewidth', boxWidth);
line([cent+w/2 cent+w/2 xlim(2) xlim(2)], ...
     [ylim(1) -pinHeight -pinHeight ylim(2)], ...
     'linewidth', boxWidth);
pinInterval = 0.4;

numLeftPins = round((-cent-w/2 - xlim(1))/pinInterval);
numCentPins = round((cent-w/2 + cent-w/2)/pinInterval);
numRightPins = round((xlim(2) - cent-w/2)/pinInterval);
numPins = numLeftPins + numCentPins + numRightPins;
pinValuesX = [linspace(xlim(1), -cent-w/2, numLeftPins) NaN ...
             linspace(-cent+w/2, cent-w/2, numCentPins) NaN ...
             linspace(cent+w/2, xlim(2), numRightPins)];
pinValuesY = repmat([-pinHeight 0]', 1, numPins+2);
line([pinValuesX; pinValuesX], pinValuesY, 'color', [0 0 1], 'linewidth', ...
     2);

ball.v = [0 -1];
ball.vVar = 0;
set(visStruct.varSlider, 'value', sqrt(ball.vVar));
energyX = xlim(2)+1;
energyY = ylim(2)+1;
aveX = (xlim(2)-xlim(1))/2+1+xlim(1);
aveY = ylim(2)+1;
scoreX = xlim(1);
scoreY = ylim(2)+1;

set(gcf, 'keypressfcn', @fallPressKey)
set(gcf, 'keyreleasefcn', @fallReleaseKey)
ball.energyCount = 0;
visStruct.leftClick = text(-2, -1.5, 'Left', 'visible', 'off', ...
                           'fontsize', 20, ...
                           'fontname', 'helvetica', ...
                           'horizontalalign', 'left');
visStruct.rightClick = text(2, -1.5, 'Right', 'visible', 'off', ...
                            'fontsize', 20, 'fontname', 'helvetica', ...
                           'horizontalalign', 'right');
visStruct.energyCountTxt = text(energyX, energyY, '0', 'fontsize', 20, 'fontname', ...
                             'helvetica', ...
                           'horizontalalign', 'right');
visStruct.energyLbl = text(energyX-5, energyY, 'Energy:', 'fontsize', 20, 'fontname', ...
                             'helvetica', ...
                           'horizontalalign', 'left');
visStruct.averageTxt = text(aveX, aveY, '-', 'fontsize', 20, 'fontname', ...
                             'helvetica', ...
                           'horizontalalign', 'right');
visStruct.averageLbl = text(aveX-5, aveY, 'Average:', 'fontsize', 20, 'fontname', ...
                             'helvetica', ...
                           'horizontalalign', 'left');
visStruct.scoreTxt = text(scoreX, scoreY, '0', 'fontsize', 20, 'fontname', ...
                             'helvetica', ...
                           'horizontalalign', 'right');
visStruct.scoreLbl = text(scoreX-1, scoreY, 'Score:', 'fontsize', 20, 'fontname', ...
                             'helvetica', ...
                           'horizontalalign', 'right');

visStruct.bangTxt = text(0, 0, 'BANG!', 'fontsize', 20, 'fontname', ...
                             'helvetica', ...
                           'horizontalalign', 'center', 'visible', ...
                         'off', 'verticalalign', 'middle');
ball.r = 0.25;
simulateFallingBall;
close all
clear all
